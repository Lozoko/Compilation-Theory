
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'nonassocIFSnonassocELSEright=ADDASSIGNSUBASSIGNMULASSIGNDIVASSIGNleftUNEQUALEQUALleft<>LESSEQUALGREATEREQUALleft+-leftDOTADDDOTSUBleft*/leftDOTMULDOTDIVADDASSIGN BREAK COMMENT CONTINUE DIVASSIGN DOTADD DOTDIV DOTMUL DOTSUB ELSE EQUAL EYE FLOATNUMBER FOR GREATEREQUAL ID IF IFS LESSEQUAL MULASSIGN NUMBER ONES PRINT RETURN STRING SUBASSIGN UNEQUAL WHILE ZEROSstart : LINELINE : IDX \';\' LINE\n                | IFX LINE\n                | WHILEX LINE\n                | FORX LINE\n                | RETURNX \';\' LINE\n                | PRINTX \';\' LINE\n                | BLOCK LINE\n                | EMPTYONELINE : IDX \';\'\n                    | IFX\n                    | WHILEX\n                    | FORX\n                    | RETURNX \';\'\n                    | PRINTX \';\' BLOCK : \'{\' LINE \'}\' EMPTY :IDX : ID \'=\' EXPRESSION\n               | ID \'=\' MATRIX\n               | ID \'=\' TABLE\n               | ID \'[\' EXPRESSION \']\' \'=\' EXPRESSION\n               | ID \'[\' EXPRESSION \',\' EXPRESSION \']\' \'=\' EXPRESSIONIDX : ID ADDASSIGN EXPRESSION\n               | ID ADDASSIGN MATRIX\n               | ID ADDASSIGN TABLE\n               | ID \'[\' EXPRESSION \']\' ADDASSIGN EXPRESSION\n               | ID \'[\' EXPRESSION \',\' EXPRESSION \']\' ADDASSIGN EXPRESSION\n               | ID SUBASSIGN EXPRESSION\n               | ID SUBASSIGN MATRIX\n               | ID SUBASSIGN TABLE\n               | ID \'[\' EXPRESSION \']\' SUBASSIGN EXPRESSION\n               | ID \'[\' EXPRESSION \',\' EXPRESSION \']\' SUBASSIGN EXPRESSION\n               | ID MULASSIGN EXPRESSION\n               | ID MULASSIGN MATRIX\n               | ID MULASSIGN TABLE\n               | ID \'[\' EXPRESSION \']\' MULASSIGN EXPRESSION\n               | ID \'[\' EXPRESSION \',\' EXPRESSION \']\' MULASSIGN EXPRESSION\n               | ID DIVASSIGN EXPRESSION\n               | ID DIVASSIGN MATRIX\n               | ID DIVASSIGN TABLE\n               | ID \'[\' EXPRESSION \']\' DIVASSIGN EXPRESSION\n               | ID \'[\' EXPRESSION \',\' EXPRESSION \']\' DIVASSIGN EXPRESSION ZEROSX : ZEROS \'(\' EXPRESSION \')\'ONESX : ONES \'(\' EXPRESSION \')\'EYEX : EYE \'(\' EXPRESSION \')\'MATRIX : \'[\' MATRIXINSIDE \']\'\n                    | MATRIXEXPR\n                    | ZEROSX\n                    | ONESX\n                    | EYEXMATRIXINSIDE : TABLE \',\' MATRIXINSIDE\n                        | TABLETABLE : \'[\' VALUES \']\'VALUES :  EXPRESSION \',\' VALUES\n                | EXPRESSIONMATRIXEXPR : EXPRESSION DOTADD MATRIXEXPR\n                   | EXPRESSION DOTSUB MATRIXEXPR\n                   | EXPRESSION DOTMUL MATRIXEXPR\n                   | EXPRESSION DOTDIV MATRIXEXPR\n                   | EXPRESSION "\'"\n                   | EMPTY IFX :    IF \'(\' CONDITION \')\' ONELINE %prec IFS\n                |   IF \'(\' CONDITION \')\' BLOCK %prec IFS\n                |   IF \'(\' CONDITION \')\' ONELINE ELSE ONELINE\n                |   IF \'(\' CONDITION \')\' ONELINE ELSE BLOCK\n                |   IF \'(\' CONDITION \')\' BLOCK ELSE ONELINE\n                |   IF \'(\' CONDITION \')\' BLOCK ELSE BLOCK LOOPLINE : IDX \';\' LOOPLINE\n                    | WHILEX LOOPLINE\n                    | FORX LOOPLINE\n                    | RETURNX \';\' LOOPLINE\n                    | PRINTX \';\' LOOPLINE\n                    | LOOPBLOCK LOOPLINE\n                    | EMPTY\n                    | LOOPIFX LOOPLINE\n                    | BREAKX \';\' LOOPLINE\n                    | CONTINUEX \';\' LOOPLINEONELOOPLINE : IDX \';\'\n                        | WHILEX\n                        | FORX\n                        | RETURNX \';\'\n                        | PRINTX \';\'\n                        | LOOPIFX\n                        | BREAKX \';\'\n                        | CONTINUEX \';\' BREAKX : BREAK CONTINUEX : CONTINUE LOOPBLOCK : \'{\' LOOPLINE \'}\'LOOPIFX :    IF \'(\' CONDITION \')\' ONELOOPLINE %prec IFS\n                    |   IF \'(\' CONDITION \')\' LOOPBLOCK %prec IFS\n                    |   IF \'(\' CONDITION \')\' ONELOOPLINE ELSE ONELOOPLINE\n                    |   IF \'(\' CONDITION \')\' ONELOOPLINE ELSE LOOPBLOCK\n                    |   IF \'(\' CONDITION \')\' LOOPBLOCK ELSE ONELOOPLINE\n                    |   IF \'(\' CONDITION \')\' LOOPBLOCK ELSE LOOPBLOCK WHILEX : WHILE \'(\' CONDITION \')\' ONELOOPLINE\n                    | WHILE \'(\' CONDITION \')\' LOOPBLOCKFORX : FOR ID \'=\' EXPRESSION \':\' EXPRESSION ONELOOPLINE\n                | FOR ID \'=\' EXPRESSION \':\' EXPRESSION LOOPBLOCKCONDITION : EXPRESSION EQUAL EXPRESSION\n                        | EXPRESSION UNEQUAL EXPRESSION\n                        | EXPRESSION LESSEQUAL EXPRESSION\n                        | EXPRESSION GREATEREQUAL EXPRESSION\n                        | EXPRESSION \'>\' EXPRESSION\n                        | EXPRESSION \'<\' EXPRESSION PRINTX : PRINT PRINTMANY PRINTMANY : STRINGX \',\' PRINTMANY\n                    |  EXPRESSION \',\' PRINTMANY\n                    |  STRINGX\n                    |  EXPRESSION STRINGX :  STRING RETURNX : RETURN EXPRESSION EXPRESSION : NUMBEREXPRESSION : FLOATNUMBEREXPRESSION : IDEXPRESSION : EXPRESSION \'+\' EXPRESSION\n                      | EXPRESSION \'-\' EXPRESSIONEXPRESSION : EXPRESSION \'*\' EXPRESSION\n                      | EXPRESSION \'/\' EXPRESSIONEXPRESSION : \'(\' EXPRESSION \')\'EXPRESSION : \'-\' EXPRESSION'
    
_lr_action_items = {'ID':([0,4,5,6,9,14,15,16,17,18,22,23,25,26,27,28,29,30,31,32,35,36,37,38,39,51,76,77,78,79,80,81,83,84,85,86,87,88,89,91,96,97,98,100,101,102,103,104,105,106,107,108,110,111,112,113,114,125,129,130,131,132,133,135,136,138,139,140,149,150,152,153,156,159,163,175,176,177,178,179,180,181,182,183,184,187,188,191,193,196,197,198,199,200,201,202,203,204,205,206,207,208,211,212,215,216,218,219,230,231,232,233,234,235,236,237,238,],[11,11,11,11,11,33,37,37,11,11,11,11,37,37,37,37,37,37,37,37,-112,-113,-114,37,37,37,37,37,37,37,37,-120,37,37,-16,37,37,37,37,37,37,37,37,37,11,37,37,37,37,37,37,11,-115,-116,-117,-118,-119,37,37,37,37,37,37,-62,-63,-11,-12,-13,-95,-96,-79,-80,-83,11,37,11,11,-10,-14,-15,-78,-81,-82,-84,-85,11,11,11,11,37,11,37,37,37,37,37,-64,-65,-67,-66,-88,11,11,11,11,11,-97,-98,11,-89,-90,11,11,-91,-92,-94,-93,]),'IF':([0,4,5,6,9,17,18,22,23,35,36,37,81,85,101,108,110,111,112,113,114,135,136,138,139,140,149,150,152,153,156,159,175,176,177,178,179,180,181,182,183,184,187,188,191,193,197,203,204,205,206,207,208,211,212,215,216,218,219,230,231,232,233,234,235,236,237,238,],[12,12,12,12,12,12,12,12,12,-112,-113,-114,-120,-16,12,160,-115,-116,-117,-118,-119,-62,-63,-11,-12,-13,-95,-96,-79,-80,-83,160,12,12,-10,-14,-15,-78,-81,-82,-84,-85,160,160,160,160,160,-64,-65,-67,-66,-88,160,160,160,160,160,-97,-98,160,-89,-90,160,160,-91,-92,-94,-93,]),'WHILE':([0,4,5,6,9,17,18,22,23,35,36,37,81,85,101,108,110,111,112,113,114,135,136,138,139,140,149,150,152,153,156,159,175,176,177,178,179,180,181,182,183,184,187,188,191,193,197,203,204,205,206,207,208,211,212,215,216,218,219,230,231,232,233,234,235,236,237,238,],[13,13,13,13,13,13,13,13,13,-112,-113,-114,-120,-16,13,13,-115,-116,-117,-118,-119,-62,-63,-11,-12,-13,-95,-96,-79,-80,-83,13,13,13,-10,-14,-15,-78,-81,-82,-84,-85,13,13,13,13,13,-64,-65,-67,-66,-88,13,13,13,13,13,-97,-98,13,-89,-90,13,13,-91,-92,-94,-93,]),'FOR':([0,4,5,6,9,17,18,22,23,35,36,37,81,85,101,108,110,111,112,113,114,135,136,138,139,140,149,150,152,153,156,159,175,176,177,178,179,180,181,182,183,184,187,188,191,193,197,203,204,205,206,207,208,211,212,215,216,218,219,230,231,232,233,234,235,236,237,238,],[14,14,14,14,14,14,14,14,14,-112,-113,-114,-120,-16,14,14,-115,-116,-117,-118,-119,-62,-63,-11,-12,-13,-95,-96,-79,-80,-83,14,14,14,-10,-14,-15,-78,-81,-82,-84,-85,14,14,14,14,14,-64,-65,-67,-66,-88,14,14,14,14,14,-97,-98,14,-89,-90,14,14,-91,-92,-94,-93,]),'RETURN':([0,4,5,6,9,17,18,22,23,35,36,37,81,85,101,108,110,111,112,113,114,135,136,138,139,140,149,150,152,153,156,159,175,176,177,178,179,180,181,182,183,184,187,188,191,193,197,203,204,205,206,207,208,211,212,215,216,218,219,230,231,232,233,234,235,236,237,238,],[15,15,15,15,15,15,15,15,15,-112,-113,-114,-120,-16,15,15,-115,-116,-117,-118,-119,-62,-63,-11,-12,-13,-95,-96,-79,-80,-83,15,15,15,-10,-14,-15,-78,-81,-82,-84,-85,15,15,15,15,15,-64,-65,-67,-66,-88,15,15,15,15,15,-97,-98,15,-89,-90,15,15,-91,-92,-94,-93,]),'PRINT':([0,4,5,6,9,17,18,22,23,35,36,37,81,85,101,108,110,111,112,113,114,135,136,138,139,140,149,150,152,153,156,159,175,176,177,178,179,180,181,182,183,184,187,188,191,193,197,203,204,205,206,207,208,211,212,215,216,218,219,230,231,232,233,234,235,236,237,238,],[16,16,16,16,16,16,16,16,16,-112,-113,-114,-120,-16,16,16,-115,-116,-117,-118,-119,-62,-63,-11,-12,-13,-95,-96,-79,-80,-83,16,16,16,-10,-14,-15,-78,-81,-82,-84,-85,16,16,16,16,16,-64,-65,-67,-66,-88,16,16,16,16,16,-97,-98,16,-89,-90,16,16,-91,-92,-94,-93,]),'{':([0,4,5,6,9,17,18,22,23,35,36,37,81,85,101,108,110,111,112,113,114,135,136,138,139,140,149,150,152,153,156,159,175,176,177,178,179,180,181,182,183,184,187,188,191,193,197,203,204,205,206,207,208,211,212,215,216,218,219,230,231,232,233,234,235,236,237,238,],[17,17,17,17,17,17,17,17,17,-112,-113,-114,-120,-16,17,159,-115,-116,-117,-118,-119,-62,-63,-11,-12,-13,-95,-96,-79,-80,-83,159,17,17,-10,-14,-15,-78,-81,-82,-84,-85,159,159,159,159,159,-64,-65,-67,-66,-88,159,159,159,159,159,-97,-98,159,-89,-90,159,159,-91,-92,-94,-93,]),'$end':([0,1,2,4,5,6,9,10,18,19,20,21,22,23,24,45,46,47,85,135,136,138,139,140,149,150,152,153,156,177,178,179,180,181,182,183,184,203,204,205,206,207,218,219,231,232,235,236,237,238,],[-17,0,-1,-17,-17,-17,-17,-9,-17,-3,-4,-5,-17,-17,-8,-2,-6,-7,-16,-62,-63,-11,-12,-13,-95,-96,-79,-80,-83,-10,-14,-15,-78,-81,-82,-84,-85,-64,-65,-67,-66,-88,-97,-98,-89,-90,-91,-92,-94,-93,]),';':([3,7,8,25,27,28,29,30,34,35,36,37,40,41,42,43,48,49,50,52,53,54,55,56,61,62,63,64,65,66,67,68,69,70,71,72,81,86,87,88,89,90,110,111,112,113,114,115,116,118,119,120,121,122,123,137,141,142,151,154,155,157,158,161,162,166,167,168,169,170,171,172,173,186,189,190,194,195,220,221,222,223,224,],[18,22,23,-17,-17,-17,-17,-17,-111,-112,-113,-114,-105,-108,-109,-110,-18,-19,-20,-47,-48,-49,-50,-61,-23,-24,-25,-28,-29,-30,-33,-34,-35,-38,-39,-40,-120,-17,-17,-17,-17,-60,-115,-116,-117,-118,-119,-106,-107,-56,-57,-58,-59,-46,-53,177,178,179,180,181,182,183,184,-86,-87,-43,-44,-45,-21,-26,-31,-36,-41,208,211,212,215,216,-22,-27,-32,-37,-42,]),'}':([4,5,6,9,10,17,18,19,20,21,22,23,24,44,45,46,47,85,135,136,138,139,140,149,150,152,153,156,159,177,178,179,180,181,182,183,184,185,187,188,191,192,193,203,204,205,206,207,208,209,210,211,212,213,214,215,216,218,219,225,226,227,228,229,231,232,235,236,237,238,],[-17,-17,-17,-17,-9,-17,-17,-3,-4,-5,-17,-17,-8,85,-2,-6,-7,-16,-62,-63,-11,-12,-13,-95,-96,-79,-80,-83,-17,-10,-14,-15,-78,-81,-82,-84,-85,207,-17,-17,-17,-74,-17,-64,-65,-67,-66,-88,-17,-69,-70,-17,-17,-73,-75,-17,-17,-97,-98,-68,-71,-72,-76,-77,-89,-90,-91,-92,-94,-93,]),'=':([11,33,99,174,],[25,76,129,198,]),'[':([11,25,27,28,29,30,51,124,],[26,51,51,51,51,51,91,91,]),'ADDASSIGN':([11,99,174,],[27,130,199,]),'SUBASSIGN':([11,99,174,],[28,131,200,]),'MULASSIGN':([11,99,174,],[29,132,201,]),'DIVASSIGN':([11,99,174,],[30,133,202,]),'(':([12,13,15,16,25,26,27,28,29,30,31,32,38,39,51,57,58,59,76,77,78,79,80,83,84,86,87,88,89,91,96,97,98,100,102,103,104,105,106,107,125,129,130,131,132,133,160,163,196,198,199,200,201,202,],[31,32,39,39,39,39,39,39,39,39,39,39,39,39,39,96,97,98,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,196,39,39,39,39,39,39,39,]),'NUMBER':([15,16,25,26,27,28,29,30,31,32,38,39,51,76,77,78,79,80,83,84,86,87,88,89,91,96,97,98,100,102,103,104,105,106,107,125,129,130,131,132,133,163,196,198,199,200,201,202,],[35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,]),'FLOATNUMBER':([15,16,25,26,27,28,29,30,31,32,38,39,51,76,77,78,79,80,83,84,86,87,88,89,91,96,97,98,100,102,103,104,105,106,107,125,129,130,131,132,133,163,196,198,199,200,201,202,],[36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,]),'-':([15,16,25,26,27,28,29,30,31,32,34,35,36,37,38,39,42,48,51,60,61,64,67,70,74,76,77,78,79,80,81,82,83,84,86,87,88,89,91,95,96,97,98,100,102,103,104,105,106,107,109,110,111,112,113,114,117,125,126,127,128,129,130,131,132,133,134,143,144,145,146,147,148,163,169,170,171,172,173,196,197,198,199,200,201,202,220,221,222,223,224,],[38,38,38,38,38,38,38,38,38,38,78,-112,-113,-114,38,38,78,78,38,78,78,78,78,78,78,38,38,38,38,38,-120,78,38,38,38,38,38,38,38,78,38,38,38,38,38,38,38,38,38,38,78,-115,-116,-117,-118,-119,78,38,78,78,78,38,38,38,38,38,78,78,78,78,78,78,78,38,78,78,78,78,78,38,78,38,38,38,38,38,78,78,78,78,78,]),'STRING':([16,83,84,],[43,43,43,]),'ZEROS':([25,27,28,29,30,],[57,57,57,57,57,]),'ONES':([25,27,28,29,30,],[58,58,58,58,58,]),'EYE':([25,27,28,29,30,],[59,59,59,59,59,]),'+':([34,35,36,37,42,48,60,61,64,67,70,74,81,82,95,109,110,111,112,113,114,117,126,127,128,134,143,144,145,146,147,148,169,170,171,172,173,197,220,221,222,223,224,],[77,-112,-113,-114,77,77,77,77,77,77,77,77,-120,77,77,77,-115,-116,-117,-118,-119,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,]),'*':([34,35,36,37,42,48,60,61,64,67,70,74,81,82,95,109,110,111,112,113,114,117,126,127,128,134,143,144,145,146,147,148,169,170,171,172,173,197,220,221,222,223,224,],[79,-112,-113,-114,79,79,79,79,79,79,79,79,79,79,79,79,79,79,-117,-118,-119,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,]),'/':([34,35,36,37,42,48,60,61,64,67,70,74,81,82,95,109,110,111,112,113,114,117,126,127,128,134,143,144,145,146,147,148,169,170,171,172,173,197,220,221,222,223,224,],[80,-112,-113,-114,80,80,80,80,80,80,80,80,80,80,80,80,80,80,-117,-118,-119,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,]),',':([35,36,37,41,42,43,60,81,94,95,110,111,112,113,114,123,],[-112,-113,-114,83,84,-110,100,-120,124,125,-115,-116,-117,-118,-119,-53,]),'DOTADD':([35,36,37,48,61,64,67,70,81,110,111,112,113,114,117,],[-112,-113,-114,86,86,86,86,86,-120,-115,-116,-117,-118,-119,86,]),'DOTSUB':([35,36,37,48,61,64,67,70,81,110,111,112,113,114,117,],[-112,-113,-114,87,87,87,87,87,-120,-115,-116,-117,-118,-119,87,]),'DOTMUL':([35,36,37,48,61,64,67,70,81,110,111,112,113,114,117,],[-112,-113,-114,88,88,88,88,88,-120,-115,-116,-117,-118,-119,88,]),'DOTDIV':([35,36,37,48,61,64,67,70,81,110,111,112,113,114,117,],[-112,-113,-114,89,89,89,89,89,-120,-115,-116,-117,-118,-119,89,]),"'":([35,36,37,48,61,64,67,70,81,110,111,112,113,114,117,],[-112,-113,-114,90,90,90,90,90,-120,-115,-116,-117,-118,-119,90,]),']':([35,36,37,60,81,92,93,94,95,110,111,112,113,114,123,134,164,165,],[-112,-113,-114,99,-120,122,123,-52,-55,-115,-116,-117,-118,-119,-53,174,-51,-54,]),'EQUAL':([35,36,37,74,81,110,111,112,113,114,],[-112,-113,-114,102,-120,-115,-116,-117,-118,-119,]),'UNEQUAL':([35,36,37,74,81,110,111,112,113,114,],[-112,-113,-114,103,-120,-115,-116,-117,-118,-119,]),'LESSEQUAL':([35,36,37,74,81,110,111,112,113,114,],[-112,-113,-114,104,-120,-115,-116,-117,-118,-119,]),'GREATEREQUAL':([35,36,37,74,81,110,111,112,113,114,],[-112,-113,-114,105,-120,-115,-116,-117,-118,-119,]),'>':([35,36,37,74,81,110,111,112,113,114,],[-112,-113,-114,106,-120,-115,-116,-117,-118,-119,]),'<':([35,36,37,74,81,110,111,112,113,114,],[-112,-113,-114,107,-120,-115,-116,-117,-118,-119,]),')':([35,36,37,73,75,81,82,110,111,112,113,114,126,127,128,143,144,145,146,147,148,217,],[-112,-113,-114,101,108,-120,114,-115,-116,-117,-118,-119,166,167,168,-99,-100,-101,-102,-103,-104,230,]),':':([35,36,37,81,109,110,111,112,113,114,],[-112,-113,-114,-120,163,-115,-116,-117,-118,-119,]),'BREAK':([35,36,37,81,108,110,111,112,113,114,149,150,152,153,156,159,180,181,182,183,184,187,188,191,193,197,207,208,211,212,215,216,218,219,230,231,232,233,234,235,236,237,238,],[-112,-113,-114,-120,161,-115,-116,-117,-118,-119,-95,-96,-79,-80,-83,161,-78,-81,-82,-84,-85,161,161,161,161,161,-88,161,161,161,161,161,-97,-98,161,-89,-90,161,161,-91,-92,-94,-93,]),'CONTINUE':([35,36,37,81,108,110,111,112,113,114,149,150,152,153,156,159,180,181,182,183,184,187,188,191,193,197,207,208,211,212,215,216,218,219,230,231,232,233,234,235,236,237,238,],[-112,-113,-114,-120,162,-115,-116,-117,-118,-119,-95,-96,-79,-80,-83,162,-78,-81,-82,-84,-85,162,162,162,162,162,-88,162,162,162,162,162,-97,-98,162,-89,-90,162,162,-91,-92,-94,-93,]),'ELSE':([85,135,136,138,139,140,149,150,152,153,156,177,178,179,180,181,182,183,184,203,204,205,206,207,218,219,231,232,235,236,237,238,],[-16,175,176,-11,-12,-13,-95,-96,-79,-80,-83,-10,-14,-15,-78,-81,-82,-84,-85,-64,-65,-67,-66,-88,-97,-98,233,234,-91,-92,-94,-93,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'start':([0,],[1,]),'LINE':([0,4,5,6,9,17,18,22,23,],[2,19,20,21,24,44,45,46,47,]),'IDX':([0,4,5,6,9,17,18,22,23,101,108,159,175,176,187,188,191,193,197,208,211,212,215,216,230,233,234,],[3,3,3,3,3,3,3,3,3,137,151,186,137,137,186,186,186,186,151,186,186,186,186,186,151,151,151,]),'IFX':([0,4,5,6,9,17,18,22,23,101,175,176,],[4,4,4,4,4,4,4,4,4,138,138,138,]),'WHILEX':([0,4,5,6,9,17,18,22,23,101,108,159,175,176,187,188,191,193,197,208,211,212,215,216,230,233,234,],[5,5,5,5,5,5,5,5,5,139,152,187,139,139,187,187,187,187,152,187,187,187,187,187,152,152,152,]),'FORX':([0,4,5,6,9,17,18,22,23,101,108,159,175,176,187,188,191,193,197,208,211,212,215,216,230,233,234,],[6,6,6,6,6,6,6,6,6,140,153,188,140,140,188,188,188,188,153,188,188,188,188,188,153,153,153,]),'RETURNX':([0,4,5,6,9,17,18,22,23,101,108,159,175,176,187,188,191,193,197,208,211,212,215,216,230,233,234,],[7,7,7,7,7,7,7,7,7,141,154,189,141,141,189,189,189,189,154,189,189,189,189,189,154,154,154,]),'PRINTX':([0,4,5,6,9,17,18,22,23,101,108,159,175,176,187,188,191,193,197,208,211,212,215,216,230,233,234,],[8,8,8,8,8,8,8,8,8,142,155,190,142,142,190,190,190,190,155,190,190,190,190,190,155,155,155,]),'BLOCK':([0,4,5,6,9,17,18,22,23,101,175,176,],[9,9,9,9,9,9,9,9,9,136,204,205,]),'EMPTY':([0,4,5,6,9,17,18,22,23,25,27,28,29,30,86,87,88,89,159,187,188,191,193,208,211,212,215,216,],[10,10,10,10,10,10,10,10,10,56,56,56,56,56,56,56,56,56,192,192,192,192,192,192,192,192,192,192,]),'EXPRESSION':([15,16,25,26,27,28,29,30,31,32,38,39,51,76,77,78,79,80,83,84,86,87,88,89,91,96,97,98,100,102,103,104,105,106,107,125,129,130,131,132,133,163,196,198,199,200,201,202,],[34,42,48,60,61,64,67,70,74,74,81,82,95,109,110,111,112,113,42,42,117,117,117,117,95,126,127,128,134,143,144,145,146,147,148,95,169,170,171,172,173,197,74,220,221,222,223,224,]),'PRINTMANY':([16,83,84,],[40,115,116,]),'STRINGX':([16,83,84,],[41,41,41,]),'MATRIX':([25,27,28,29,30,],[49,62,65,68,71,]),'TABLE':([25,27,28,29,30,51,124,],[50,63,66,69,72,94,94,]),'MATRIXEXPR':([25,27,28,29,30,86,87,88,89,],[52,52,52,52,52,118,119,120,121,]),'ZEROSX':([25,27,28,29,30,],[53,53,53,53,53,]),'ONESX':([25,27,28,29,30,],[54,54,54,54,54,]),'EYEX':([25,27,28,29,30,],[55,55,55,55,55,]),'CONDITION':([31,32,196,],[73,75,217,]),'MATRIXINSIDE':([51,124,],[92,164,]),'VALUES':([51,91,125,],[93,93,165,]),'ONELINE':([101,175,176,],[135,203,206,]),'ONELOOPLINE':([108,197,230,233,234,],[149,218,231,235,238,]),'LOOPBLOCK':([108,159,187,188,191,193,197,208,211,212,215,216,230,233,234,],[150,191,191,191,191,191,219,191,191,191,191,191,232,236,237,]),'LOOPIFX':([108,159,187,188,191,193,197,208,211,212,215,216,230,233,234,],[156,193,193,193,193,193,156,193,193,193,193,193,156,156,156,]),'BREAKX':([108,159,187,188,191,193,197,208,211,212,215,216,230,233,234,],[157,194,194,194,194,194,157,194,194,194,194,194,157,157,157,]),'CONTINUEX':([108,159,187,188,191,193,197,208,211,212,215,216,230,233,234,],[158,195,195,195,195,195,158,195,195,195,195,195,158,158,158,]),'LOOPLINE':([159,187,188,191,193,208,211,212,215,216,],[185,209,210,213,214,225,226,227,228,229,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> start","S'",1,None,None,None),
  ('start -> LINE','start',1,'p_start','Mparser.py',39),
  ('LINE -> IDX ; LINE','LINE',3,'p_line','Mparser.py',46),
  ('LINE -> IFX LINE','LINE',2,'p_line','Mparser.py',47),
  ('LINE -> WHILEX LINE','LINE',2,'p_line','Mparser.py',48),
  ('LINE -> FORX LINE','LINE',2,'p_line','Mparser.py',49),
  ('LINE -> RETURNX ; LINE','LINE',3,'p_line','Mparser.py',50),
  ('LINE -> PRINTX ; LINE','LINE',3,'p_line','Mparser.py',51),
  ('LINE -> BLOCK LINE','LINE',2,'p_line','Mparser.py',52),
  ('LINE -> EMPTY','LINE',1,'p_line','Mparser.py',53),
  ('ONELINE -> IDX ;','ONELINE',2,'p_oneline','Mparser.py',63),
  ('ONELINE -> IFX','ONELINE',1,'p_oneline','Mparser.py',64),
  ('ONELINE -> WHILEX','ONELINE',1,'p_oneline','Mparser.py',65),
  ('ONELINE -> FORX','ONELINE',1,'p_oneline','Mparser.py',66),
  ('ONELINE -> RETURNX ;','ONELINE',2,'p_oneline','Mparser.py',67),
  ('ONELINE -> PRINTX ;','ONELINE',2,'p_oneline','Mparser.py',68),
  ('BLOCK -> { LINE }','BLOCK',3,'p_block','Mparser.py',75),
  ('EMPTY -> <empty>','EMPTY',0,'p_empty','Mparser.py',81),
  ('IDX -> ID = EXPRESSION','IDX',3,'p_idx_assign','Mparser.py',85),
  ('IDX -> ID = MATRIX','IDX',3,'p_idx_assign','Mparser.py',86),
  ('IDX -> ID = TABLE','IDX',3,'p_idx_assign','Mparser.py',87),
  ('IDX -> ID [ EXPRESSION ] = EXPRESSION','IDX',6,'p_idx_assign','Mparser.py',88),
  ('IDX -> ID [ EXPRESSION , EXPRESSION ] = EXPRESSION','IDX',8,'p_idx_assign','Mparser.py',89),
  ('IDX -> ID ADDASSIGN EXPRESSION','IDX',3,'p_idx_opassign','Mparser.py',98),
  ('IDX -> ID ADDASSIGN MATRIX','IDX',3,'p_idx_opassign','Mparser.py',99),
  ('IDX -> ID ADDASSIGN TABLE','IDX',3,'p_idx_opassign','Mparser.py',100),
  ('IDX -> ID [ EXPRESSION ] ADDASSIGN EXPRESSION','IDX',6,'p_idx_opassign','Mparser.py',101),
  ('IDX -> ID [ EXPRESSION , EXPRESSION ] ADDASSIGN EXPRESSION','IDX',8,'p_idx_opassign','Mparser.py',102),
  ('IDX -> ID SUBASSIGN EXPRESSION','IDX',3,'p_idx_opassign','Mparser.py',103),
  ('IDX -> ID SUBASSIGN MATRIX','IDX',3,'p_idx_opassign','Mparser.py',104),
  ('IDX -> ID SUBASSIGN TABLE','IDX',3,'p_idx_opassign','Mparser.py',105),
  ('IDX -> ID [ EXPRESSION ] SUBASSIGN EXPRESSION','IDX',6,'p_idx_opassign','Mparser.py',106),
  ('IDX -> ID [ EXPRESSION , EXPRESSION ] SUBASSIGN EXPRESSION','IDX',8,'p_idx_opassign','Mparser.py',107),
  ('IDX -> ID MULASSIGN EXPRESSION','IDX',3,'p_idx_opassign','Mparser.py',108),
  ('IDX -> ID MULASSIGN MATRIX','IDX',3,'p_idx_opassign','Mparser.py',109),
  ('IDX -> ID MULASSIGN TABLE','IDX',3,'p_idx_opassign','Mparser.py',110),
  ('IDX -> ID [ EXPRESSION ] MULASSIGN EXPRESSION','IDX',6,'p_idx_opassign','Mparser.py',111),
  ('IDX -> ID [ EXPRESSION , EXPRESSION ] MULASSIGN EXPRESSION','IDX',8,'p_idx_opassign','Mparser.py',112),
  ('IDX -> ID DIVASSIGN EXPRESSION','IDX',3,'p_idx_opassign','Mparser.py',113),
  ('IDX -> ID DIVASSIGN MATRIX','IDX',3,'p_idx_opassign','Mparser.py',114),
  ('IDX -> ID DIVASSIGN TABLE','IDX',3,'p_idx_opassign','Mparser.py',115),
  ('IDX -> ID [ EXPRESSION ] DIVASSIGN EXPRESSION','IDX',6,'p_idx_opassign','Mparser.py',116),
  ('IDX -> ID [ EXPRESSION , EXPRESSION ] DIVASSIGN EXPRESSION','IDX',8,'p_idx_opassign','Mparser.py',117),
  ('ZEROSX -> ZEROS ( EXPRESSION )','ZEROSX',4,'p_zerosx','Mparser.py',127),
  ('ONESX -> ONES ( EXPRESSION )','ONESX',4,'p_onesx','Mparser.py',132),
  ('EYEX -> EYE ( EXPRESSION )','EYEX',4,'p_eyex','Mparser.py',137),
  ('MATRIX -> [ MATRIXINSIDE ]','MATRIX',3,'p_matrix','Mparser.py',142),
  ('MATRIX -> MATRIXEXPR','MATRIX',1,'p_matrix','Mparser.py',143),
  ('MATRIX -> ZEROSX','MATRIX',1,'p_matrix','Mparser.py',144),
  ('MATRIX -> ONESX','MATRIX',1,'p_matrix','Mparser.py',145),
  ('MATRIX -> EYEX','MATRIX',1,'p_matrix','Mparser.py',146),
  ('MATRIXINSIDE -> TABLE , MATRIXINSIDE','MATRIXINSIDE',3,'p_matrixinside','Mparser.py',153),
  ('MATRIXINSIDE -> TABLE','MATRIXINSIDE',1,'p_matrixinside','Mparser.py',154),
  ('TABLE -> [ VALUES ]','TABLE',3,'p_table','Mparser.py',161),
  ('VALUES -> EXPRESSION , VALUES','VALUES',3,'p_values','Mparser.py',165),
  ('VALUES -> EXPRESSION','VALUES',1,'p_values','Mparser.py',166),
  ('MATRIXEXPR -> EXPRESSION DOTADD MATRIXEXPR','MATRIXEXPR',3,'p_matrixop','Mparser.py',184),
  ('MATRIXEXPR -> EXPRESSION DOTSUB MATRIXEXPR','MATRIXEXPR',3,'p_matrixop','Mparser.py',185),
  ('MATRIXEXPR -> EXPRESSION DOTMUL MATRIXEXPR','MATRIXEXPR',3,'p_matrixop','Mparser.py',186),
  ('MATRIXEXPR -> EXPRESSION DOTDIV MATRIXEXPR','MATRIXEXPR',3,'p_matrixop','Mparser.py',187),
  ("MATRIXEXPR -> EXPRESSION '",'MATRIXEXPR',2,'p_matrixop','Mparser.py',188),
  ('MATRIXEXPR -> EMPTY','MATRIXEXPR',1,'p_matrixop','Mparser.py',189),
  ('IFX -> IF ( CONDITION ) ONELINE','IFX',5,'p_ifx_if','Mparser.py',200),
  ('IFX -> IF ( CONDITION ) BLOCK','IFX',5,'p_ifx_if','Mparser.py',201),
  ('IFX -> IF ( CONDITION ) ONELINE ELSE ONELINE','IFX',7,'p_ifx_if','Mparser.py',202),
  ('IFX -> IF ( CONDITION ) ONELINE ELSE BLOCK','IFX',7,'p_ifx_if','Mparser.py',203),
  ('IFX -> IF ( CONDITION ) BLOCK ELSE ONELINE','IFX',7,'p_ifx_if','Mparser.py',204),
  ('IFX -> IF ( CONDITION ) BLOCK ELSE BLOCK','IFX',7,'p_ifx_if','Mparser.py',205),
  ('LOOPLINE -> IDX ; LOOPLINE','LOOPLINE',3,'p_loopline','Mparser.py',215),
  ('LOOPLINE -> WHILEX LOOPLINE','LOOPLINE',2,'p_loopline','Mparser.py',216),
  ('LOOPLINE -> FORX LOOPLINE','LOOPLINE',2,'p_loopline','Mparser.py',217),
  ('LOOPLINE -> RETURNX ; LOOPLINE','LOOPLINE',3,'p_loopline','Mparser.py',218),
  ('LOOPLINE -> PRINTX ; LOOPLINE','LOOPLINE',3,'p_loopline','Mparser.py',219),
  ('LOOPLINE -> LOOPBLOCK LOOPLINE','LOOPLINE',2,'p_loopline','Mparser.py',220),
  ('LOOPLINE -> EMPTY','LOOPLINE',1,'p_loopline','Mparser.py',221),
  ('LOOPLINE -> LOOPIFX LOOPLINE','LOOPLINE',2,'p_loopline','Mparser.py',222),
  ('LOOPLINE -> BREAKX ; LOOPLINE','LOOPLINE',3,'p_loopline','Mparser.py',223),
  ('LOOPLINE -> CONTINUEX ; LOOPLINE','LOOPLINE',3,'p_loopline','Mparser.py',224),
  ('ONELOOPLINE -> IDX ;','ONELOOPLINE',2,'p_oneloopline','Mparser.py',234),
  ('ONELOOPLINE -> WHILEX','ONELOOPLINE',1,'p_oneloopline','Mparser.py',235),
  ('ONELOOPLINE -> FORX','ONELOOPLINE',1,'p_oneloopline','Mparser.py',236),
  ('ONELOOPLINE -> RETURNX ;','ONELOOPLINE',2,'p_oneloopline','Mparser.py',237),
  ('ONELOOPLINE -> PRINTX ;','ONELOOPLINE',2,'p_oneloopline','Mparser.py',238),
  ('ONELOOPLINE -> LOOPIFX','ONELOOPLINE',1,'p_oneloopline','Mparser.py',239),
  ('ONELOOPLINE -> BREAKX ;','ONELOOPLINE',2,'p_oneloopline','Mparser.py',240),
  ('ONELOOPLINE -> CONTINUEX ;','ONELOOPLINE',2,'p_oneloopline','Mparser.py',241),
  ('BREAKX -> BREAK','BREAKX',1,'p_breakx','Mparser.py',247),
  ('CONTINUEX -> CONTINUE','CONTINUEX',1,'p_continuex','Mparser.py',251),
  ('LOOPBLOCK -> { LOOPLINE }','LOOPBLOCK',3,'p_loopblock','Mparser.py',255),
  ('LOOPIFX -> IF ( CONDITION ) ONELOOPLINE','LOOPIFX',5,'p_loopifx_if','Mparser.py',260),
  ('LOOPIFX -> IF ( CONDITION ) LOOPBLOCK','LOOPIFX',5,'p_loopifx_if','Mparser.py',261),
  ('LOOPIFX -> IF ( CONDITION ) ONELOOPLINE ELSE ONELOOPLINE','LOOPIFX',7,'p_loopifx_if','Mparser.py',262),
  ('LOOPIFX -> IF ( CONDITION ) ONELOOPLINE ELSE LOOPBLOCK','LOOPIFX',7,'p_loopifx_if','Mparser.py',263),
  ('LOOPIFX -> IF ( CONDITION ) LOOPBLOCK ELSE ONELOOPLINE','LOOPIFX',7,'p_loopifx_if','Mparser.py',264),
  ('LOOPIFX -> IF ( CONDITION ) LOOPBLOCK ELSE LOOPBLOCK','LOOPIFX',7,'p_loopifx_if','Mparser.py',265),
  ('WHILEX -> WHILE ( CONDITION ) ONELOOPLINE','WHILEX',5,'p_whilex','Mparser.py',275),
  ('WHILEX -> WHILE ( CONDITION ) LOOPBLOCK','WHILEX',5,'p_whilex','Mparser.py',276),
  ('FORX -> FOR ID = EXPRESSION : EXPRESSION ONELOOPLINE','FORX',7,'p_forx','Mparser.py',282),
  ('FORX -> FOR ID = EXPRESSION : EXPRESSION LOOPBLOCK','FORX',7,'p_forx','Mparser.py',283),
  ('CONDITION -> EXPRESSION EQUAL EXPRESSION','CONDITION',3,'p_condition','Mparser.py',289),
  ('CONDITION -> EXPRESSION UNEQUAL EXPRESSION','CONDITION',3,'p_condition','Mparser.py',290),
  ('CONDITION -> EXPRESSION LESSEQUAL EXPRESSION','CONDITION',3,'p_condition','Mparser.py',291),
  ('CONDITION -> EXPRESSION GREATEREQUAL EXPRESSION','CONDITION',3,'p_condition','Mparser.py',292),
  ('CONDITION -> EXPRESSION > EXPRESSION','CONDITION',3,'p_condition','Mparser.py',293),
  ('CONDITION -> EXPRESSION < EXPRESSION','CONDITION',3,'p_condition','Mparser.py',294),
  ('PRINTX -> PRINT PRINTMANY','PRINTX',2,'p_printx','Mparser.py',299),
  ('PRINTMANY -> STRINGX , PRINTMANY','PRINTMANY',3,'p_printmany','Mparser.py',303),
  ('PRINTMANY -> EXPRESSION , PRINTMANY','PRINTMANY',3,'p_printmany','Mparser.py',304),
  ('PRINTMANY -> STRINGX','PRINTMANY',1,'p_printmany','Mparser.py',305),
  ('PRINTMANY -> EXPRESSION','PRINTMANY',1,'p_printmany','Mparser.py',306),
  ('STRINGX -> STRING','STRINGX',1,'p_stringx','Mparser.py',313),
  ('RETURNX -> RETURN EXPRESSION','RETURNX',2,'p_returnx_return','Mparser.py',318),
  ('EXPRESSION -> NUMBER','EXPRESSION',1,'p_expression_number','Mparser.py',325),
  ('EXPRESSION -> FLOATNUMBER','EXPRESSION',1,'p_expression_float','Mparser.py',329),
  ('EXPRESSION -> ID','EXPRESSION',1,'p_expression_id','Mparser.py',333),
  ('EXPRESSION -> EXPRESSION + EXPRESSION','EXPRESSION',3,'p_expression_sum','Mparser.py',337),
  ('EXPRESSION -> EXPRESSION - EXPRESSION','EXPRESSION',3,'p_expression_sum','Mparser.py',338),
  ('EXPRESSION -> EXPRESSION * EXPRESSION','EXPRESSION',3,'p_expression_mul','Mparser.py',342),
  ('EXPRESSION -> EXPRESSION / EXPRESSION','EXPRESSION',3,'p_expression_mul','Mparser.py',343),
  ('EXPRESSION -> ( EXPRESSION )','EXPRESSION',3,'p_expression_group','Mparser.py',347),
  ('EXPRESSION -> - EXPRESSION','EXPRESSION',2,'p_expression_unarynegation','Mparser.py',351),
]
